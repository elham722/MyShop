### Get all customers with pagination
GET https://localhost:7000/api/customers?PageNumber=1&PageSize=10
Accept: application/json

### Get customers with sorting
GET https://localhost:7000/api/customers?PageNumber=1&PageSize=10&Sorting[0].Field=FirstName&Sorting[0].Direction=asc
Accept: application/json

### Get customers with multiple sorting (FirstName ASC, then Age DESC)
GET https://localhost:7000/api/customers?PageNumber=1&PageSize=10&Sorting[0].Field=FirstName&Sorting[0].Direction=asc&Sorting[1].Field=Age&Sorting[1].Direction=desc
Accept: application/json

### Get customers with combined filtering and sorting
GET https://localhost:7000/api/customers?PageNumber=1&PageSize=10&Filtering[0].Field=Status&Filtering[0].Operator=Equals&Filtering[0].Value=Active&Sorting[0].Field=CreatedAt&Sorting[0].Direction=desc
Accept: application/json

### Get customers with filtering
GET https://localhost:7000/api/customers?PageNumber=1&PageSize=10&Filtering[0].Field=Status&Filtering[0].Operator=Equals&Filtering[0].Value=Active
Accept: application/json

### Get customers with advanced filtering (Age > 25)
GET https://localhost:7000/api/customers?PageNumber=1&PageSize=10&Filtering[0].Field=Age&Filtering[0].Operator=GreaterThan&Filtering[0].Value=25&Filtering[0].ValueType=int
Accept: application/json

### Get customers with date filtering (CreatedAt >= 2024-01-01)
GET https://localhost:7000/api/customers?PageNumber=1&PageSize=10&Filtering[0].Field=CreatedAt&Filtering[0].Operator=GreaterThanOrEqual&Filtering[0].Value=2024-01-01T00:00:00Z&Filtering[0].ValueType=datetime
Accept: application/json

### Get customers with multiple filters (Status = Active AND Age > 20)
GET https://localhost:7000/api/customers?PageNumber=1&PageSize=10&Filtering[0].Field=Status&Filtering[0].Operator=Equals&Filtering[0].Value=Active&Filtering[1].Field=Age&Filtering[1].Operator=GreaterThan&Filtering[1].Value=20&Filtering[1].ValueType=int
Accept: application/json

### Get customers with search
GET https://localhost:7000/api/customers?PageNumber=1&PageSize=10&Search=علی
Accept: application/json

### Get customer by ID
GET https://localhost:7000/api/customers/{{customerId}}
Accept: application/json

### Create new customer
POST https://localhost:7000/api/customers
Content-Type: application/json

{
  "firstName": "احمد",
  "lastName": "محمدی",
  "dateOfBirth": "1988-03-15T00:00:00Z",
  "email": "ahmad@example.com",
  "mobileNumber": "09151234567",
  "createdBy": "API"
}

### Expected Response with Meta:
### {
###   "success": true,
###   "data": { ... },
###   "errors": [],
###   "meta": {
###     "createdAt": "2025-01-27T10:30:00Z",
###     "operation": "CreateCustomer",
###     "version": "1.0"
###   },
###   "traceId": "0HMQ8VQKJQJQJ"
### }

### Update customer
PUT https://localhost:7000/api/customers/{{customerId}}
Content-Type: application/json

{
  "firstName": "احمد",
  "lastName": "محمدی",
  "dateOfBirth": "1988-03-15T00:00:00Z",
  "email": "ahmad.updated@example.com",
  "mobileNumber": "09151234567",
  "updatedBy": "API"
}

### Expected Response with Meta:
### {
###   "success": true,
###   "data": { ... },
###   "errors": [],
###   "meta": {
###     "updatedAt": "2025-01-27T10:30:00Z",
###     "operation": "UpdateCustomer",
###     "customerId": "123e4567-e89b-12d3-a456-426614174000",
###     "version": "1.0"
###   },
###   "traceId": "0HMQ8VQKJQJQJ"
### }

### Delete customer
DELETE https://localhost:7000/api/customers/{{customerId}}
Accept: application/json

### Expected Response with Meta:
### {
###   "success": true,
###   "data": null,
###   "errors": [],
###   "meta": {
###     "deletedAt": "2025-01-27T10:30:00Z",
###     "operation": "DeleteCustomer",
###     "customerId": "123e4567-e89b-12d3-a456-426614174000",
###     "version": "1.0"
###   },
###   "traceId": "0HMQ8VQKJQJQJ"
### }

### Test Error Scenarios

### Create customer with invalid data (Domain Validation Error)
POST https://localhost:7000/api/customers
Content-Type: application/json

{
  "firstName": "",
  "lastName": "",
  "email": "invalid-email",
  "mobileNumber": "invalid-phone",
  "createdBy": "API"
}

### Expected Error Response:
### {
###   "success": false,
###   "data": null,
###   "errors": ["Customer email must be unique", "Customer must have valid name"],
###   "meta": null,
###   "traceId": "0HMQ8VQKJQJQJ"
### }

### Get non-existent customer (Not Found Error)
GET https://localhost:7000/api/customers/00000000-0000-0000-0000-000000000000
Accept: application/json

### Expected Error Response (400 Bad Request):
### {
###   "success": false,
###   "data": null,
###   "errors": ["Customer with ID '00000000-0000-0000-0000-000000000000' not found"],
###   "meta": null,
###   "traceId": "0HMQ8VQKJQJQJ"
### }

### Test Success Scenarios

### Create customer successfully (201 Created)
POST https://localhost:7000/api/customers
Content-Type: application/json

{
  "firstName": "احمد",
  "lastName": "محمدی",
  "dateOfBirth": "1988-03-15T00:00:00Z",
  "email": "ahmad@example.com",
  "mobileNumber": "09151234567",
  "createdBy": "API"
}

### Expected Success Response (201 Created):
### {
###   "success": true,
###   "data": { ... },
###   "errors": [],
###   "meta": {
###     "createdAt": "2025-01-27T10:30:00Z",
###     "operation": "CreateCustomer",
###     "version": "1.0"
###   },
###   "traceId": "0HMQ8VQKJQJQJ"
### }

### Get existing customer (200 OK)
GET https://localhost:7000/api/customers/{{customerId}}
Accept: application/json

### Expected Success Response (200 OK):
### {
###   "success": true,
###   "data": { ... },
###   "errors": [],
###   "meta": null,
###   "traceId": "0HMQ8VQKJQJQJ"
### }