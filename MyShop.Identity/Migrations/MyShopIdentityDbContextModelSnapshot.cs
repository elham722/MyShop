// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MyShop.Identity.Context;

#nullable disable

namespace MyShop.Identity.Migrations
{
    [DbContext(typeof(MyShopIdentityDbContext))]
    partial class MyShopIdentityDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("MyShop.Identity.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Unique identifier for the user");

                    b.Property<int>("AccessFailedCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasComment("Number of failed access attempts");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("Concurrency stamp for optimistic concurrency control");

                    b.Property<string>("CustomerId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Foreign key to the customer entity");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Email address of the user");

                    b.Property<bool>("EmailConfirmed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasComment("Whether the email address has been confirmed");

                    b.Property<string>("GoogleId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Google OAuth ID");

                    b.Property<bool>("LockoutEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasComment("Whether lockout is enabled for this user");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset")
                        .HasComment("When the lockout ends (null = not locked)");

                    b.Property<string>("MicrosoftId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Microsoft OAuth ID");

                    b.Property<string>("NormalizedEmail")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Normalized email for case-insensitive lookups");

                    b.Property<string>("NormalizedUserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Normalized username for case-insensitive lookups");

                    b.Property<string>("PasswordHash")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("Hashed password of the user");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("Phone number of the user");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasComment("Whether the phone number has been confirmed");

                    b.Property<string>("SecurityStamp")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("Security stamp for token validation");

                    b.Property<bool>("SmsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasComment("Whether SMS two-factor authentication is enabled");

                    b.Property<bool>("TotpEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasComment("Whether TOTP is enabled");

                    b.Property<string>("TotpSecretKey")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("TOTP secret key for two-factor authentication");

                    b.Property<bool>("TwoFactorEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasComment("Whether two-factor authentication is enabled");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Unique username for the user");

                    b.HasKey("Id");

                    b.HasIndex("AccessFailedCount")
                        .HasDatabaseName("IX_ApplicationUser_AccessFailedCount");

                    b.HasIndex("CustomerId")
                        .HasDatabaseName("IX_ApplicationUser_CustomerId");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("IX_ApplicationUser_Email_Unique");

                    b.HasIndex("EmailConfirmed")
                        .HasDatabaseName("IX_ApplicationUser_EmailConfirmed");

                    b.HasIndex("GoogleId")
                        .HasDatabaseName("IX_ApplicationUser_GoogleId");

                    b.HasIndex("LockoutEnd")
                        .HasDatabaseName("IX_ApplicationUser_LockoutEnd");

                    b.HasIndex("MicrosoftId")
                        .HasDatabaseName("IX_ApplicationUser_MicrosoftId");

                    b.HasIndex("NormalizedEmail")
                        .IsUnique()
                        .HasDatabaseName("IX_ApplicationUser_NormalizedEmail_Unique");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("IX_ApplicationUser_NormalizedUserName_Unique");

                    b.HasIndex("PhoneNumberConfirmed")
                        .HasDatabaseName("IX_ApplicationUser_PhoneNumberConfirmed");

                    b.HasIndex("SmsEnabled")
                        .HasDatabaseName("IX_ApplicationUser_SmsEnabled");

                    b.HasIndex("TotpEnabled")
                        .HasDatabaseName("IX_ApplicationUser_TotpEnabled");

                    b.HasIndex("TwoFactorEnabled")
                        .HasDatabaseName("IX_ApplicationUser_TwoFactorEnabled");

                    b.HasIndex("UserName")
                        .IsUnique()
                        .HasDatabaseName("IX_ApplicationUser_UserName_Unique");

                    b.HasIndex("CustomerId", "EmailConfirmed")
                        .HasDatabaseName("IX_ApplicationUser_CustomerId_EmailConfirmed");

                    b.HasIndex("LockoutEnabled", "LockoutEnd")
                        .HasDatabaseName("IX_ApplicationUser_LockoutEnabled_LockoutEnd");

                    b.HasIndex("TotpEnabled", "SmsEnabled")
                        .HasDatabaseName("IX_ApplicationUser_TotpEnabled_SmsEnabled");

                    b.ToTable("Users", "Identity", t =>
                        {
                            t.HasComment("Application users with enhanced security and audit features");
                        });
                });

            modelBuilder.Entity("MyShop.Identity.Models.AuditLog", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Unique identifier for the audit log entry");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Action performed (e.g., Login, Logout, Create, Update, Delete)");

                    b.Property<string>("AdditionalData")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Additional context data in JSON format");

                    b.Property<string>("DeviceInfo")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("Device information (OS, Browser, etc.)");

                    b.Property<string>("EntityId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("ID of the entity that was affected");

                    b.Property<string>("EntityType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Type of entity that was affected (e.g., User, Customer, Order)");

                    b.Property<string>("ErrorMessage")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasComment("Error message if the operation failed");

                    b.Property<string>("IpAddress")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)")
                        .HasComment("IP address of the client");

                    b.Property<bool>("IsSuccess")
                        .HasColumnType("bit")
                        .HasComment("Whether the operation was successful");

                    b.Property<string>("NewValues")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("JSON representation of the new values after the change");

                    b.Property<string>("OldValues")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("JSON representation of the old values before the change");

                    b.Property<string>("RequestId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Request correlation ID");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Session identifier");

                    b.Property<string>("Severity")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("Severity level of the audit entry");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2")
                        .HasComment("When the action was performed");

                    b.Property<string>("UserAgent")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("User agent string from the client");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("ID of the user who performed the action");

                    b.HasKey("Id");

                    b.HasIndex("Action")
                        .HasDatabaseName("IX_AuditLog_Action");

                    b.HasIndex("EntityId")
                        .HasDatabaseName("IX_AuditLog_EntityId");

                    b.HasIndex("EntityType")
                        .HasDatabaseName("IX_AuditLog_EntityType");

                    b.HasIndex("IsSuccess")
                        .HasDatabaseName("IX_AuditLog_IsSuccess");

                    b.HasIndex("Severity")
                        .HasDatabaseName("IX_AuditLog_Severity");

                    b.HasIndex("Timestamp")
                        .HasDatabaseName("IX_AuditLogs_Timestamp");

                    b.HasIndex("UserId")
                        .HasDatabaseName("IX_AuditLog_UserId");

                    b.HasIndex("EntityType", "EntityId")
                        .HasDatabaseName("IX_AuditLogs_EntityType_EntityId");

                    b.HasIndex("Severity", "Timestamp")
                        .HasDatabaseName("IX_AuditLog_Severity_Timestamp");

                    b.HasIndex("UserId", "Timestamp")
                        .HasDatabaseName("IX_AuditLogs_UserId_Timestamp");

                    b.HasIndex("EntityType", "EntityId", "Timestamp")
                        .HasDatabaseName("IX_AuditLog_Entity_TypeId_Timestamp");

                    b.ToTable("AuditLogs", "Identity");
                });

            modelBuilder.Entity("MyShop.Identity.Models.Permission", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Unique identifier for the permission");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("The action this permission allows");

                    b.Property<string>("Category")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Category for grouping permissions");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasComment("When this permission was created");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Who created this permission");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("Detailed description of what this permission allows");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasComment("Whether this permission is currently active");

                    b.Property<bool>("IsSystemPermission")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasComment("Whether this is a system permission that cannot be modified");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Human-readable name of the permission");

                    b.Property<int>("Priority")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(5)
                        .HasComment("Priority level (1=highest, 10=lowest)");

                    b.Property<string>("Resource")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("The resource this permission applies to");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasComment("When this permission was last updated");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Who last updated this permission");

                    b.HasKey("Id");

                    b.HasIndex("Category")
                        .HasDatabaseName("IX_Permission_Category");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_Permission_CreatedAt");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("IX_Permission_IsActive");

                    b.HasIndex("IsSystemPermission")
                        .HasDatabaseName("IX_Permission_IsSystemPermission");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("IX_Permissions_Name_Unique")
                        .HasFilter("[IsActive] = 1");

                    b.HasIndex("Resource", "Action")
                        .IsUnique()
                        .HasDatabaseName("IX_Permissions_Resource_Action_Unique")
                        .HasFilter("[IsActive] = 1");

                    b.ToTable("Permissions", "Identity", t =>
                        {
                            t.HasComment("System permissions for fine-grained access control");
                        });
                });

            modelBuilder.Entity("MyShop.Identity.Models.Role", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Unique identifier for the role");

                    b.Property<string>("Category")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Category for grouping roles");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasComment("When this role was created");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Who created this role");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("Detailed description of what this role allows");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasComment("Whether this role is currently active");

                    b.Property<bool>("IsSystemRole")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasComment("Whether this is a system role that cannot be modified");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Human-readable name of the role");

                    b.Property<string>("NormalizedName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Normalized name for case-insensitive lookups");

                    b.Property<int>("Priority")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(5)
                        .HasComment("Priority level for sorting (1=highest, 10=lowest)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasComment("When this role was last updated");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Who last updated this role");

                    b.HasKey("Id");

                    b.HasIndex("Category")
                        .HasDatabaseName("IX_Role_Category");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_Role_CreatedAt");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("IX_Role_IsActive");

                    b.HasIndex("IsSystemRole")
                        .HasDatabaseName("IX_Role_IsSystemRole");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("IX_Roles_Name_Unique");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("IX_Role_NormalizedName_Unique")
                        .HasFilter("[IsActive] = 1");

                    b.HasIndex("Priority")
                        .HasDatabaseName("IX_Role_Priority");

                    b.HasIndex("Category", "Priority")
                        .HasDatabaseName("IX_Roles_Category_Priority");

                    b.ToTable("Roles", "Identity", t =>
                        {
                            t.HasComment("User roles for role-based access control");
                        });
                });

            modelBuilder.Entity("MyShop.Identity.Models.RolePermission", b =>
                {
                    b.Property<string>("RoleId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Foreign key to the role");

                    b.Property<string>("PermissionId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Foreign key to the permission");

                    b.Property<DateTime>("AssignedAt")
                        .HasColumnType("datetime2")
                        .HasComment("When this permission was assigned to the role");

                    b.Property<string>("AssignedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Who assigned this permission to the role");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasComment("When this assignment was created");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Who created this assignment");

                    b.Property<DateTime?>("ExpiresAt")
                        .HasColumnType("datetime2")
                        .HasComment("When this assignment expires (null = never expires)");

                    b.Property<string>("Id")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Unique identifier for the role-permission assignment");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasComment("Whether this assignment is currently active");

                    b.Property<bool>("IsGranted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasComment("Whether this permission is granted (true) or denied (false)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasComment("When this assignment was last updated");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Who last updated this assignment");

                    b.HasKey("RoleId", "PermissionId");

                    b.HasIndex("AssignedAt")
                        .HasDatabaseName("IX_RolePermission_AssignedAt");

                    b.HasIndex("AssignedBy")
                        .HasDatabaseName("IX_RolePermission_AssignedBy");

                    b.HasIndex("ExpiresAt")
                        .HasDatabaseName("IX_RolePermission_ExpiresAt");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("IX_RolePermission_IsActive");

                    b.HasIndex("IsGranted")
                        .HasDatabaseName("IX_RolePermission_IsGranted");

                    b.HasIndex("PermissionId")
                        .HasDatabaseName("IX_RolePermission_PermissionId");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("IX_RolePermission_RoleId");

                    b.HasIndex("RoleId", "PermissionId")
                        .IsUnique()
                        .HasDatabaseName("IX_RolePermission_RoleId_PermissionId_Unique")
                        .HasFilter("[IsActive] = 1");

                    b.ToTable("RolePermissions", "Identity", t =>
                        {
                            t.HasComment("Many-to-many relationship between roles and permissions");
                        });
                });

            modelBuilder.Entity("MyShop.Identity.Models.UserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Unique identifier for the user claim");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Category")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Category for grouping claims (Business, System, etc.)");

                    b.Property<string>("ClaimType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("The type of the claim");

                    b.Property<string>("ClaimValue")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("The value of the claim");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasComment("When this claim was created");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Who created this claim");

                    b.Property<DateTime?>("ExpiresAt")
                        .HasColumnType("datetime2")
                        .HasComment("When this claim expires (null = never expires)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasComment("Whether this claim is currently active");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasComment("When this claim was last updated");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Who last updated this claim");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Foreign key to the user");

                    b.HasKey("Id");

                    b.HasIndex("Category")
                        .HasDatabaseName("IX_UserClaim_Category");

                    b.HasIndex("ClaimType")
                        .HasDatabaseName("IX_UserClaim_ClaimType");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_UserClaim_CreatedAt");

                    b.HasIndex("ExpiresAt")
                        .HasDatabaseName("IX_UserClaim_ExpiresAt");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("IX_UserClaim_IsActive");

                    b.HasIndex("UserId")
                        .HasDatabaseName("IX_UserClaim_UserId");

                    b.HasIndex("UserId", "ClaimType")
                        .HasDatabaseName("IX_UserClaim_UserId_ClaimType")
                        .HasFilter("[IsActive] = 1");

                    b.ToTable("UserClaims", "Identity", t =>
                        {
                            t.HasComment("Custom user claims for dynamic business claims that need management and expiration");
                        });
                });

            modelBuilder.Entity("MyShop.Identity.Models.UserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("The login provider (e.g., Google, Facebook, Local)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("The provider key (e.g., Google ID, Facebook ID)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasComment("When this login was created");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Who created this login");

                    b.Property<string>("DeviceInfo")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("Device information (OS, model, etc.)");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)")
                        .HasComment("IP address of the login");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasComment("Whether this login is currently active");

                    b.Property<bool>("IsTrusted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasComment("Whether this device is trusted");

                    b.Property<DateTime?>("LastUsedAt")
                        .HasColumnType("datetime2")
                        .HasComment("When this login was last used");

                    b.Property<string>("Location")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Geographic location of the login");

                    b.Property<string>("ProviderDisplayName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("The display name of the provider");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasComment("When this login was last updated");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Who last updated this login");

                    b.Property<string>("UserAgent")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("User agent string from the browser");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Foreign key to the user");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_UserLogin_CreatedAt");

                    b.HasIndex("IpAddress")
                        .HasDatabaseName("IX_UserLogin_IpAddress");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("IX_UserLogin_IsActive");

                    b.HasIndex("IsTrusted")
                        .HasDatabaseName("IX_UserLogin_IsTrusted");

                    b.HasIndex("LastUsedAt")
                        .HasDatabaseName("IX_UserLogin_LastUsedAt");

                    b.HasIndex("Location")
                        .HasDatabaseName("IX_UserLogin_Location");

                    b.HasIndex("LoginProvider")
                        .HasDatabaseName("IX_UserLogin_LoginProvider");

                    b.HasIndex("UserId")
                        .HasDatabaseName("IX_UserLogin_UserId");

                    b.HasIndex("UserId", "IsActive")
                        .HasDatabaseName("IX_UserLogin_UserId_IsActive");

                    b.HasIndex("UserId", "IsTrusted")
                        .HasDatabaseName("IX_UserLogin_UserId_IsTrusted");

                    b.ToTable("UserLogins", "Identity", t =>
                        {
                            t.HasComment("User login tracking for multi-device management and security monitoring");
                        });
                });

            modelBuilder.Entity("MyShop.Identity.Models.UserRole", b =>
                {
                    b.Property<string>("UserId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Foreign key to the user");

                    b.Property<string>("RoleId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Foreign key to the role");

                    b.Property<DateTime>("AssignedAt")
                        .HasColumnType("datetime2")
                        .HasComment("When this role was assigned to the user");

                    b.Property<string>("AssignedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Who assigned this role to the user");

                    b.Property<string>("AssignmentCategory")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Category of the assignment (Standard, Temporary, Emergency, etc.)");

                    b.Property<string>("AssignmentReason")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("Reason for assigning this role to the user");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasComment("When this role assignment was created");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Who created this role assignment");

                    b.Property<DateTime?>("ExpiresAt")
                        .HasColumnType("datetime2")
                        .HasComment("When this role assignment expires (null = never expires)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasComment("Whether this role assignment is currently active");

                    b.Property<bool>("IsTemporary")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasComment("Whether this is a temporary role assignment");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasComment("Additional notes about this role assignment");

                    b.Property<int>("Priority")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(5)
                        .HasComment("Priority level for sorting (1=highest, 10=lowest)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasComment("When this role assignment was last updated");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Who last updated this role assignment");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("AssignedAt")
                        .HasDatabaseName("IX_UserRole_AssignedAt");

                    b.HasIndex("AssignedBy")
                        .HasDatabaseName("IX_UserRole_AssignedBy");

                    b.HasIndex("AssignmentCategory")
                        .HasDatabaseName("IX_UserRole_AssignmentCategory");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_UserRole_CreatedAt");

                    b.HasIndex("ExpiresAt")
                        .HasDatabaseName("IX_UserRole_ExpiresAt");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("IX_UserRole_IsActive");

                    b.HasIndex("IsTemporary")
                        .HasDatabaseName("IX_UserRole_IsTemporary");

                    b.HasIndex("Priority")
                        .HasDatabaseName("IX_UserRole_Priority");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("IX_UserRole_RoleId");

                    b.HasIndex("UserId")
                        .HasDatabaseName("IX_UserRole_UserId");

                    b.HasIndex("RoleId", "IsActive")
                        .HasDatabaseName("IX_UserRole_RoleId_IsActive");

                    b.HasIndex("UserId", "ExpiresAt")
                        .HasDatabaseName("IX_UserRole_UserId_ExpiresAt");

                    b.HasIndex("UserId", "IsActive")
                        .HasDatabaseName("IX_UserRole_UserId_IsActive");

                    b.HasIndex("UserId", "IsTemporary")
                        .HasDatabaseName("IX_UserRole_UserId_IsTemporary");

                    b.HasIndex("UserId", "Priority")
                        .HasDatabaseName("IX_UserRole_UserId_Priority");

                    b.ToTable("UserRoles", "Identity", t =>
                        {
                            t.HasComment("User role assignments with expiration, priority, and audit tracking");
                        });
                });

            modelBuilder.Entity("MyShop.Identity.Models.UserToken", b =>
                {
                    b.Property<string>("UserId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Foreign key to the user");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("The login provider (e.g., Local, Google, Facebook)");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("The name of the token (e.g., AccessToken, RefreshToken)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasComment("When this token was created");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Who created this token");

                    b.Property<string>("DeviceInfo")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("Device information (OS, model, etc.)");

                    b.Property<DateTime?>("ExpiresAt")
                        .HasColumnType("datetime2")
                        .HasComment("When this token expires (null = never expires)");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)")
                        .HasComment("IP address of the token creation");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasComment("Whether this token is currently active");

                    b.Property<bool>("IsRevoked")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasComment("Whether this token has been revoked");

                    b.Property<bool>("IsRotated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasComment("Whether this token has been rotated");

                    b.Property<DateTime?>("LastUsedAt")
                        .HasColumnType("datetime2")
                        .HasComment("When this token was last used");

                    b.Property<string>("ParentTokenId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("ID of the parent token (for token rotation)");

                    b.Property<string>("RevocationReason")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("Reason for revoking the token");

                    b.Property<DateTime?>("RevokedAt")
                        .HasColumnType("datetime2")
                        .HasComment("When this token was revoked");

                    b.Property<string>("RevokedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Who revoked this token");

                    b.Property<DateTime?>("RotatedAt")
                        .HasColumnType("datetime2")
                        .HasComment("When this token was rotated");

                    b.Property<string>("RotatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Who rotated this token");

                    b.Property<string>("TokenPurpose")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("The purpose of the token (e.g., Access, Refresh, Authentication)");

                    b.Property<string>("TokenType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("The type of token (e.g., Bearer, JWT, OAuth)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasComment("When this token was last updated");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Who last updated this token");

                    b.Property<int>("UsageCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasComment("Number of times this token has been used");

                    b.Property<string>("UserAgent")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("User agent string from the browser");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)")
                        .HasComment("The token value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_UserToken_CreatedAt");

                    b.HasIndex("ExpiresAt")
                        .HasDatabaseName("IX_UserTokens_ExpiresAt");

                    b.HasIndex("IpAddress")
                        .HasDatabaseName("IX_UserToken_IpAddress");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("IX_UserToken_IsActive");

                    b.HasIndex("IsRevoked")
                        .HasDatabaseName("IX_UserToken_IsRevoked");

                    b.HasIndex("IsRotated")
                        .HasDatabaseName("IX_UserToken_IsRotated");

                    b.HasIndex("LastUsedAt")
                        .HasDatabaseName("IX_UserToken_LastUsedAt");

                    b.HasIndex("LoginProvider")
                        .HasDatabaseName("IX_UserToken_LoginProvider");

                    b.HasIndex("Name")
                        .HasDatabaseName("IX_UserToken_Name");

                    b.HasIndex("ParentTokenId")
                        .HasDatabaseName("IX_UserToken_ParentTokenId");

                    b.HasIndex("TokenPurpose")
                        .HasDatabaseName("IX_UserToken_TokenPurpose");

                    b.HasIndex("TokenType")
                        .HasDatabaseName("IX_UserToken_TokenType");

                    b.HasIndex("UserId")
                        .HasDatabaseName("IX_UserToken_UserId");

                    b.HasIndex("UserId", "ExpiresAt")
                        .HasDatabaseName("IX_UserToken_UserId_ExpiresAt");

                    b.HasIndex("UserId", "IsActive")
                        .HasDatabaseName("IX_UserToken_UserId_IsActive");

                    b.HasIndex("UserId", "IsRevoked")
                        .HasDatabaseName("IX_UserToken_UserId_IsRevoked");

                    b.HasIndex("UserId", "LastUsedAt")
                        .HasDatabaseName("IX_UserToken_UserId_LastUsedAt");

                    b.HasIndex("UserId", "TokenPurpose")
                        .HasDatabaseName("IX_UserToken_UserId_TokenPurpose");

                    b.ToTable("UserTokens", "Identity", t =>
                        {
                            t.HasComment("User tokens for refresh token management, multi-token scenarios, and token revocation");
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("MyShop.Identity.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MyShop.Identity.Models.ApplicationUser", b =>
                {
                    b.OwnsOne("MyShop.Domain.Shared.ValueObjects.Identity.AccountInfo", "Account", b1 =>
                        {
                            b1.Property<string>("ApplicationUserId")
                                .HasColumnType("nvarchar(50)");

                            b1.Property<string>("BranchId")
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)")
                                .HasColumnName("Account_BranchId")
                                .HasComment("Branch ID associated with the account");

                            b1.Property<DateTime>("CreatedAt")
                                .HasColumnType("datetime2")
                                .HasColumnName("Account_CreatedAt")
                                .HasComment("When the account was created");

                            b1.Property<DateTime?>("DeletedAt")
                                .HasColumnType("datetime2")
                                .HasColumnName("Account_DeletedAt")
                                .HasComment("When the account was deleted");

                            b1.Property<bool>("IsActive")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("bit")
                                .HasDefaultValue(true)
                                .HasColumnName("Account_IsActive")
                                .HasComment("Whether the account is active");

                            b1.Property<bool>("IsDeleted")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("bit")
                                .HasDefaultValue(false)
                                .HasColumnName("Account_IsDeleted")
                                .HasComment("Whether the account is deleted");

                            b1.Property<DateTime?>("LastLoginAt")
                                .HasColumnType("datetime2")
                                .HasColumnName("Account_LastLoginAt")
                                .HasComment("When the user last logged in");

                            b1.Property<DateTime?>("LastPasswordChangeAt")
                                .HasColumnType("datetime2")
                                .HasColumnName("Account_LastPasswordChangeAt")
                                .HasComment("When the password was last changed");

                            b1.Property<int>("LoginAttempts")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasDefaultValue(0)
                                .HasColumnName("Account_LoginAttempts")
                                .HasComment("Number of login attempts");

                            b1.HasKey("ApplicationUserId");

                            b1.HasIndex("BranchId")
                                .HasDatabaseName("IX_ApplicationUser_Account_BranchId");

                            b1.HasIndex("CreatedAt")
                                .HasDatabaseName("IX_ApplicationUser_Account_CreatedAt");

                            b1.HasIndex("IsActive")
                                .HasDatabaseName("IX_ApplicationUser_Account_IsActive");

                            b1.HasIndex("IsDeleted")
                                .HasDatabaseName("IX_ApplicationUser_Account_IsDeleted");

                            b1.HasIndex("LastLoginAt")
                                .HasDatabaseName("IX_ApplicationUser_Account_LastLoginAt");

                            b1.ToTable("Users", "Identity");

                            b1.WithOwner()
                                .HasForeignKey("ApplicationUserId");
                        });

                    b.OwnsOne("MyShop.Domain.Shared.ValueObjects.Identity.AuditInfo", "Audit", b1 =>
                        {
                            b1.Property<string>("ApplicationUserId")
                                .HasColumnType("nvarchar(50)");

                            b1.Property<DateTime>("CreatedAt")
                                .HasColumnType("datetime2")
                                .HasColumnName("Audit_CreatedAt")
                                .HasComment("When the user was created");

                            b1.Property<string>("CreatedBy")
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)")
                                .HasColumnName("Audit_CreatedBy")
                                .HasComment("Who created the user");

                            b1.Property<string>("IpAddress")
                                .HasMaxLength(45)
                                .HasColumnType("nvarchar(45)")
                                .HasColumnName("Audit_IpAddress")
                                .HasComment("IP address of the last operation");

                            b1.Property<DateTime?>("ModifiedAt")
                                .HasColumnType("datetime2")
                                .HasColumnName("Audit_ModifiedAt")
                                .HasComment("When the user was last modified");

                            b1.Property<string>("ModifiedBy")
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)")
                                .HasColumnName("Audit_ModifiedBy")
                                .HasComment("Who last modified the user");

                            b1.Property<string>("UserAgent")
                                .HasMaxLength(500)
                                .HasColumnType("nvarchar(500)")
                                .HasColumnName("Audit_UserAgent")
                                .HasComment("User agent of the last operation");

                            b1.HasKey("ApplicationUserId");

                            b1.HasIndex("CreatedAt")
                                .HasDatabaseName("IX_ApplicationUser_Audit_CreatedAt");

                            b1.HasIndex("CreatedBy")
                                .HasDatabaseName("IX_ApplicationUser_Audit_CreatedBy");

                            b1.HasIndex("IpAddress")
                                .HasDatabaseName("IX_ApplicationUser_Audit_IpAddress");

                            b1.HasIndex("ModifiedAt")
                                .HasDatabaseName("IX_ApplicationUser_Audit_ModifiedAt");

                            b1.HasIndex("ModifiedBy")
                                .HasDatabaseName("IX_ApplicationUser_Audit_ModifiedBy");

                            b1.ToTable("Users", "Identity");

                            b1.WithOwner()
                                .HasForeignKey("ApplicationUserId");
                        });

                    b.OwnsOne("MyShop.Domain.Shared.ValueObjects.Identity.SecurityInfo", "Security", b1 =>
                        {
                            b1.Property<string>("ApplicationUserId")
                                .HasColumnType("nvarchar(50)");

                            b1.Property<DateTime?>("LastSecurityUpdate")
                                .HasColumnType("datetime2")
                                .HasColumnName("Security_LastSecurityUpdate")
                                .HasComment("When the last security update was performed");

                            b1.Property<string>("SecurityAnswer")
                                .HasMaxLength(200)
                                .HasColumnType("nvarchar(200)")
                                .HasColumnName("Security_Answer")
                                .HasComment("Security answer for account recovery (encrypted)");

                            b1.Property<string>("SecurityQuestion")
                                .HasMaxLength(200)
                                .HasColumnType("nvarchar(200)")
                                .HasColumnName("Security_Question")
                                .HasComment("Security question for account recovery");

                            b1.Property<bool>("TwoFactorEnabled")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("bit")
                                .HasDefaultValue(false)
                                .HasColumnName("Security_TwoFactorEnabled")
                                .HasComment("Whether two-factor authentication is enabled");

                            b1.Property<DateTime?>("TwoFactorEnabledAt")
                                .HasColumnType("datetime2")
                                .HasColumnName("Security_TwoFactorEnabledAt")
                                .HasComment("When two-factor authentication was enabled");

                            b1.Property<string>("TwoFactorSecret")
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)")
                                .HasColumnName("Security_TwoFactorSecret")
                                .HasComment("Two-factor authentication secret key");

                            b1.HasKey("ApplicationUserId");

                            b1.HasIndex("LastSecurityUpdate")
                                .HasDatabaseName("IX_ApplicationUser_Security_LastSecurityUpdate");

                            b1.HasIndex("TwoFactorEnabled")
                                .HasDatabaseName("IX_ApplicationUser_Security_TwoFactorEnabled");

                            b1.HasIndex("TwoFactorEnabledAt")
                                .HasDatabaseName("IX_ApplicationUser_Security_TwoFactorEnabledAt");

                            b1.ToTable("Users", "Identity");

                            b1.WithOwner()
                                .HasForeignKey("ApplicationUserId");
                        });

                    b.Navigation("Account")
                        .IsRequired();

                    b.Navigation("Audit")
                        .IsRequired();

                    b.Navigation("Security")
                        .IsRequired();
                });

            modelBuilder.Entity("MyShop.Identity.Models.AuditLog", b =>
                {
                    b.HasOne("MyShop.Identity.Models.ApplicationUser", "User")
                        .WithMany("AuditLogs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MyShop.Identity.Models.RolePermission", b =>
                {
                    b.HasOne("MyShop.Identity.Models.Permission", "Permission")
                        .WithMany("RolePermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_RolePermission_Permission");

                    b.HasOne("MyShop.Identity.Models.Role", "Role")
                        .WithMany("RolePermissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_RolePermission_Role");

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("MyShop.Identity.Models.UserClaim", b =>
                {
                    b.HasOne("MyShop.Identity.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MyShop.Identity.Models.UserLogin", b =>
                {
                    b.HasOne("MyShop.Identity.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MyShop.Identity.Models.UserRole", b =>
                {
                    b.HasOne("MyShop.Identity.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyShop.Identity.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MyShop.Identity.Models.UserToken", b =>
                {
                    b.HasOne("MyShop.Identity.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MyShop.Identity.Models.ApplicationUser", b =>
                {
                    b.Navigation("AuditLogs");
                });

            modelBuilder.Entity("MyShop.Identity.Models.Permission", b =>
                {
                    b.Navigation("RolePermissions");
                });

            modelBuilder.Entity("MyShop.Identity.Models.Role", b =>
                {
                    b.Navigation("RolePermissions");
                });
#pragma warning restore 612, 618
        }
    }
}
